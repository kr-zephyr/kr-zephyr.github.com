<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Digital Blue Eye&#39;s dev-ops</title>
    <description>Digital Blue Eye(http://blog.sz21c.com)의 기술 이야기만 다루는 서브 블로그입니다. 블로그 주인장이 개발자인지라 일을 하면서 알게되는 이런저런 것들, 소소한 개발 과정의 이야기를 풀어볼까 합니다.</description>
    <link>http://kr-zephyr.github.io/</link>
    <atom:link href="http://kr-zephyr.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 07 Jun 2016 17:07:51 +0900</pubDate>
    <lastBuildDate>Tue, 07 Jun 2016 17:07:51 +0900</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>깃허브에 블로그를 만들면서...</title>
        <description>&lt;p&gt;아주 오래전(아마도 1997년…)부터 홈페이지라는 것을 운영하고 있었습니다.&lt;/p&gt;

&lt;p&gt;몇번의 사이트 리뉴얼을 거쳐 지금은 티스토리 기반의 블로그가 되어 있는데요. &lt;a href=&quot;http://blog.sz21c.com&quot;&gt;Digital Blue Eye (http://blog.sz21c.com)&lt;/a&gt;라는 이름도 가지고 있는 한 때 정말 열심히 포스팅을 올리던 곳이었죠.(결혼하고 나니 좀 뜸해지긴 했네요. @.@)&lt;/p&gt;

&lt;p&gt;블로그에는 소소한 생활 이야기, 취미 이야기를 쓰다가 개발자의 길을 걸으면서 개발에 대한 이야기도 조금씩 풀어가고 있었는데, 이런저런 잡탕 블로그보다는 체계적으로 무언가 쌓아볼 수 있는 블로그의 필요성을 느끼게 되었습니다.&lt;/p&gt;

&lt;p&gt;올리려는 주제는 주로 개발, 개발자의 생활에 관련된 내용들이 될 것인데, 기술적인 이야기와 함께 일을 하면서 마주치는 여러가지 이야기도 풀어놓으면 나중에 세월이 흐르고나서 일종의 지식 저장소도 될 것 같고 개인적인 history도 될 듯 싶었습니다.&lt;/p&gt;

&lt;p&gt;어떤 블로그 툴을 사용할까 여러가지 둘러보고 고민했었습니다.&lt;br /&gt;
후보가 되었던 것들은…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;티스토리 이용 (기존 블로그는 티스토리에 둥지를 틀고 있습니다.)&lt;/li&gt;
  &lt;li&gt;워드프레스 서비스 이용&lt;/li&gt;
  &lt;li&gt;워드프레스 설치 이용&lt;/li&gt;
  &lt;li&gt;자체 개발(!)&lt;/li&gt;
  &lt;li&gt;깃허브 페이지 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등등이 후보로 올랐었는데, 최종적으로는 깃허브에 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;을 이용해서 블로그를 열게 되었습니다.&lt;/p&gt;

&lt;p&gt;원했던 블로그 서비스는 아래와 같은 기능을 가지고 있어야 했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;오프라인에서 글을 작성하고 쉽게 배포할 수 있어야 한다. (이미지 포함)&lt;/li&gt;
  &lt;li&gt;Markdown으로 글을 작성할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;여러가지 모험적 시도도 해보고 싶으니 어느정도 손을 댈 수 있는 포맷이어야 한다.&lt;/li&gt;
  &lt;li&gt;가능하면 빠른 시간에(가까운 시일 내에) 설치하고 운영을 시작할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 가장 적합했던 것은 워드프레스를 설치해서 사용하는 것이었습니다.&lt;br /&gt;
실제로 개인 서버에 워드프레스를 설치하고 테마 및 기본적인 플러그인 셋팅까지 진행했었지만 최종적으로는 깃허브에 둥지를 트는 것으로 방향을 바꾸었네요.&lt;/p&gt;

&lt;p&gt;깃허브를 이용해 블로그를 운영하게 되면…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;오프라인에서 Markdown 페이지를 작성한 후 즉시 등록이 가능하다.&lt;/li&gt;
  &lt;li&gt;이미지도 오프라인에서 참조하는 방식 그대로 사용할 수 있다. (온라인 블로그 서비스들은 이미지를 서버에 올리고 http로 참조해야 하죠. 어렵진 않지만 꽤 번거롭긴 합니다.)&lt;/li&gt;
  &lt;li&gt;개발자이니 깃허브를 여러가지로 이용해 봄으로써 좀 더 깃허브와 친해질 수 있다.&lt;/li&gt;
  &lt;li&gt;맥북에 붙어 있는 스티커가 부끄럽지 않아진다. (이건 순전히 겉멋만 들었네요…ㅜㅜ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 장점들이 있습니다.&lt;/p&gt;

&lt;p&gt;어쨋든 가능하면 한 주에 하나라도 포스팅을 올려보려 합니다.&lt;/p&gt;

&lt;p&gt;이 블로그가 세월이 흘러 뒤를 돌아볼 수 있는 일기장과 기술적 지식을 쌓아놓은 지식 창고가 될 수 있었으면 좋겠네요.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jun 2016 17:00:00 +0900</pubDate>
        <link>http://kr-zephyr.github.io/devops-diary/2016/06/07/blog-start-on-github.html</link>
        <guid isPermaLink="true">http://kr-zephyr.github.io/devops-diary/2016/06/07/blog-start-on-github.html</guid>
        
        
        <category>devops-diary</category>
        
      </item>
    
      <item>
        <title>[이슈대응] Spring Boot에서 MyBatis 사용 시 Test에서 DB를 사용한 후 Test를 종료하거나, App을 종료할 때 java.lang.UnsupportedOperationException: Manual close is not allowed over a Spring managed SqlSession이 발생하는 경우</title>
        <description>&lt;p&gt;얼마 전 Github에 공개해 둔 &lt;a href=&quot;https://github.com/kr-zephyr/SpringBootWebAppSample&quot;&gt;SpringBootWebAppSample&lt;/a&gt; 프로젝트를 손보면서 Test를 추가하던 중 아래와 같은 Exception을 받게 되었다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;2016-06-07 14:23:04,260  WARN | o.s.beans.factory.support.DisposableBeanAdapter         | Invocation of destroy method &lt;span class=&quot;s1&quot;&gt;&#39;close&#39;&lt;/span&gt; failed on bean with name &lt;span class=&quot;s1&quot;&gt;&#39;sqlSessionForMyBatis&#39;&lt;/span&gt;
java.lang.UnsupportedOperationException: Manual close is not allowed over a Spring managed SqlSession
	at org.mybatis.spring.SqlSessionTemplate.close&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SqlSessionTemplate.java:310&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;NativeMethodAccessorImpl.java:62&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DelegatingMethodAccessorImpl.java:43&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at java.lang.reflect.Method.invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Method.java:497&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DisposableBeanAdapter.java:354&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DisposableBeanAdapter.java:277&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DefaultSingletonBeanRegistry.java:578&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DefaultSingletonBeanRegistry.java:554&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DefaultListableBeanFactory.java:972&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DefaultSingletonBeanRegistry.java:523&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DefaultListableBeanFactory.java:979&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractApplicationContext.java:1006&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.context.support.AbstractApplicationContext.doClose&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractApplicationContext.java:982&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at org.springframework.context.support.AbstractApplicationContext&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.run&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractApplicationContext.java:901&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;문제 자체는 MyBatis에서 DB 접근을 위해 SqlSession을 생성한 후 App이 종료되면서 생성되었던 SqlSession을 해제하려고 하면서 발생되는 Exception이다.&lt;/p&gt;

&lt;p&gt;메시지 자체는 Warning으로 프로그램이 동작하는데에는 직접적 영향을 주지 않지만 해결은 해야할 부분.&lt;/p&gt;

&lt;p&gt;여기저기 확인을 해봤는데… SpringBoot에서의 사례는 그리 눈에 보이지 않았다.&lt;/p&gt;

&lt;p&gt;그러던 중 StackOverFlow의 어느 글을 통해 해당 부분은 MyBatis의 버그이고 1.2.4 버전에서 수정되었다는 글을 보게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kr-zephyr/SpringBootWebAppSample/commit/57f427e00274fb78b01313faa34c2a07506f582c&quot;&gt;mybatis-spring을 1.2.4로 업데이트 후(기존에는 1.2.2를 사용)&lt;/a&gt; 위의 메시지는 더 이상 출력되지 않는다.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jun 2016 14:30:00 +0900</pubDate>
        <link>http://kr-zephyr.github.io/resolve-issue/2016/06/07/issue-springboot-mybatis-manual-close-is-not-allowed-over-a-spring-managed-sqlsession.html</link>
        <guid isPermaLink="true">http://kr-zephyr.github.io/resolve-issue/2016/06/07/issue-springboot-mybatis-manual-close-is-not-allowed-over-a-spring-managed-sqlsession.html</guid>
        
        
        <category>resolve-issue</category>
        
      </item>
    
      <item>
        <title>Spring Framework 4 3</title>
        <description>&lt;h2 id=&quot;spring-framework-43----&quot;&gt;6. Spring Framework 4.3의 새로운 기능 및 개선점&lt;/h2&gt;

&lt;h3 id=&quot;core-container-&quot;&gt;6.1 Core Container 개선점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;만약 목표로하는 bean이 오직 하나의 constructor를 가지고 있다면 @Autowired는 더 이상 기술할 필요가 없다.&lt;/li&gt;
  &lt;li&gt;@Configuration 클래스들은 생성자 주입을 지원한다.&lt;/li&gt;
  &lt;li&gt;모든 SpEL 표현식은 bean들을 참조할 수 있는 @EventListener의 상태를 기술하는 것에 사용할 수 있다. (즉, @beanName.method())&lt;/li&gt;
  &lt;li&gt;구성된 annotation들은 array의 component type의 단일 요소와 함께 meta-annotation들 중 array attribute를 이제 override할 수 있다. 예들 들면, @RequestMapping의 String[] path attribute는 구성된 annotation 중 String path와 함께 override될 수 있다.&lt;/li&gt;
  &lt;li&gt;@Scheduled와 @Schedules는 attribute override와 함께 커스텀화로 구성된 annotaion들을 생성하는데 meta-annotation들처럼 이제 사용될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-access-&quot;&gt;6.2 Data Access 개선점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;jdbc:initialize-database와 jdbc:embedded-database는 각각의 script에 적용된 설정할 수 있는 구분자를 지원한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;caching-&quot;&gt;6.3 Caching 개선점&lt;/h3&gt;
&lt;p&gt;Spring 4.3은 단 한번만 계산되도록 주어진 key에 대한 동시 호출을 동기화할 수 있다. 이것은 선택적 기능으로 @Cacheable의 새로운 sync attribute를 통해 활성화해야 한다. 이 기능의 추가된 get(Object key, Callable&lt;T&gt; valueLoader) 메소드같은 Cache 인터페이스에 대한 주요 변경을 소개한다.&lt;/T&gt;&lt;/p&gt;

&lt;p&gt;Spring 4.3은 아래와 같은 캐싱 개념(caching abstraction) 또한 개선했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cache들의 SpEL 표현식-관계된 annotation들은 bean들을 참조할 수 있다. (즉, @beanName.method())&lt;/li&gt;
  &lt;li&gt;ConcurrentMapCacheManger와 ConcurrentMapCache는 새로운 storeByValue attribute를 통해 cache 구성원들의 serialization(병렬)을 이제 지원한다.&lt;/li&gt;
  &lt;li&gt;@Cacheable, @CacheEvict, @CachePut과 @Caching은 이제 attribute 대체와 함께 커스텀 구성된 annotation들을 생성하는 meta-annotation으로 사용될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jms-&quot;&gt;6.4 JMS 개선점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@SendTO는 이제 공유된 공통 응답 목적지를 클래스 레벨에서 지정 될 수있다.&lt;/li&gt;
  &lt;li&gt;@JmsListener와 @JmsListeners는 이제 attribute 대체와 함께 커스텀 구성된 annotation들을 생성하는 meta-annotation으로 사용될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;web-&quot;&gt;6.5 Web 개선점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP HEAD와 HTTP OPTIONS의 내장 기능으로의 지원&lt;/li&gt;
  &lt;li&gt;@RequestMapping의 새로운 @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 그리고 @PatchMapping&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 25 May 2016 00:00:00 +0900</pubDate>
        <link>http://kr-zephyr.github.io/2016/05/25/spring-framework-4-3.html</link>
        <guid isPermaLink="true">http://kr-zephyr.github.io/2016/05/25/spring-framework-4-3.html</guid>
        
        
      </item>
    
      <item>
        <title>Spring Framework 4.3 변경 사항 - 단일 Constructor인 경우 @Autowired 생략 가능</title>
        <description>&lt;p&gt;Spring Framework의 Annotation 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;는 상당히 많이 사용하는 Annotation이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;는 Spring Framework에서 관리하는 Bean을 주입해 주는 역할을 한다. (자세한 내용은 공부하도록…)&lt;/p&gt;

&lt;p&gt;우선 기존의 코드부터 보면…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 Constructor를 이용해 Denpendency를 주입하는 경우 Spring Framework 4.2에서는 반드시 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;를 명시해야 한다. Spring Framework 4.3에서는 만약 Constructor가 1개라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;를 생략할 수 있다.&lt;/p&gt;

&lt;p&gt;아래의 소스 참고.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다만, Constructor를 사용하지 않고 변수에 직접 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;를 명시하는 경우에는 기존과 동일하게 사용해야 한다. (아래 소스 참고)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 24 May 2016 17:38:00 +0900</pubDate>
        <link>http://kr-zephyr.github.io/springframework/2016/05/24/spring-framework-4-3-change-autowired.html</link>
        <guid isPermaLink="true">http://kr-zephyr.github.io/springframework/2016/05/24/spring-framework-4-3-change-autowired.html</guid>
        
        
        <category>SpringFramework</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 24 May 2016 12:55:17 +0900</pubDate>
        <link>http://kr-zephyr.github.io/jekyll/update/2016/05/24/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://kr-zephyr.github.io/jekyll/update/2016/05/24/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
